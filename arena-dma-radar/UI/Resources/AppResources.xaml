<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:hc="https://handyorg.github.io/handycontrol"
                    xmlns:converters="clr-namespace:arena_dma_radar.Converters">

    <!-- Converters -->
    <converters:DoubleGreaterThanConverter x:Key="DoubleGreaterThanConverter"/>
    <converters:DoubleLessThanConverter x:Key="DoubleLessThanConverter"/>
    <converters:DoubleLessThanOrEqualConverter x:Key="DoubleLessThanOrEqualConverter"/>
    <converters:BoolToOpacityConverter x:Key="BoolToOpacityConverter"/>
    <converters:ColorHexToBrushConverter x:Key="ColorHexToBrushConverter"/>
    <converters:ItemIconConverter x:Key="ItemIconConverter"/>

    <BitmapImage x:Key="AppIconImage" UriSource="pack://application:,,,/lone-icon.ico"/>

    <Style x:Key="ToolbarButtonStyle" TargetType="Button" BasedOn="{StaticResource ButtonIcon}">
        <Setter Property="Margin" Value="4,0"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#222222"/>
        <Setter Property="hc:BorderElement.CornerRadius" Value="6"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="8" ShadowDepth="2" Opacity="0.6" Color="#5A5A5A"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DynamicTextStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>

    <Style x:Key="DynamicCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource CheckBoxBaseStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Generic Panel Styles -->
    <DropShadowEffect x:Key="PanelShadow" BlurRadius="15" ShadowDepth="5" Direction="315" Color="Black" Opacity="0.5"/>

    <Style x:Key="PanelHeader" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource DarkPrimaryBrush}"/>
        <Setter Property="CornerRadius" Value="8,8,0,0"/>
        <Setter Property="Cursor" Value="SizeAll"/>
    </Style>

    <Style x:Key="PanelHeaderText" TargetType="TextBlock" BasedOn="{StaticResource DynamicTextStyle}">
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Margin" Value="15,0,0,0"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource ButtonIcon}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="hc:IconElement.Width" Value="12"/>
        <Setter Property="hc:IconElement.Height" Value="12"/>
        <Setter Property="hc:IconElement.Geometry" Value="{StaticResource CloseGeometry}"/>
    </Style>

    <Style x:Key="CloseButtonBorder" TargetType="Border">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FF5555"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Color Selection Button Style -->
    <Style x:Key="ColorPickerButton" TargetType="Button">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
    </Style>

    <!-- Label Styles -->
    <Style x:Key="LabelText" TargetType="TextBlock" BasedOn="{StaticResource DynamicTextStyle}">
        <Setter Property="Margin" Value="0,0,0,5"/>
    </Style>

    <Style x:Key="ColorPickerLabel" TargetType="TextBlock" BasedOn="{StaticResource DynamicTextStyle}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
    </Style>

    <!-- Grid Layouts -->
    <Style x:Key="TwoColumnGrid" TargetType="Grid">
        <Setter Property="Margin" Value="0,0,0,10"/>
        <Style.Resources>
            <Style TargetType="ColumnDefinition">
                <Style.Triggers>
                    <Trigger Property="Grid.Column" Value="0">
                        <Setter Property="Width" Value="*"/>
                    </Trigger>
                    <Trigger Property="Grid.Column" Value="1">
                        <Setter Property="Width" Value="Auto"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ColorSelectionGrid" TargetType="Grid">
        <Style.Resources>
            <Style TargetType="ColumnDefinition">
                <Style.Triggers>
                    <Trigger Property="Grid.Column" Value="0">
                        <Setter Property="Width" Value="*"/>
                    </Trigger>
                    <Trigger Property="Grid.Column" Value="1">
                        <Setter Property="Width" Value="Auto"/>
                    </Trigger>
                    <Trigger Property="Grid.Column" Value="2">
                        <Setter Property="Width" Value="20"/>
                    </Trigger>
                    <Trigger Property="Grid.Column" Value="3">
                        <Setter Property="Width" Value="*"/>
                    </Trigger>
                    <Trigger Property="Grid.Column" Value="4">
                        <Setter Property="Width" Value="Auto"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ContainerListBoxItem" TargetType="ListBoxItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander Style -->
    <Style x:Key="PanelExpander" TargetType="Expander" BasedOn="{StaticResource ExpanderBaseStyle}">
        <Setter Property="Margin" Value="10,0,10,10"/>
        <Setter Property="IsExpanded" Value="True"/>
    </Style>

    <Style x:Key="ExpanderContent" TargetType="hc:SimpleStackPanel">
        <Setter Property="Margin" Value="0,10"/>
    </Style>

    <!-- Container List Styles -->
    <Style x:Key="ContainerListBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="ContainerListBox" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Focusable="False" 
                                 Padding="{TemplateBinding Padding}"
                                 VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Slider Layout Styles -->
    <Style x:Key="SliderContainer" TargetType="Grid">
        <Setter Property="Margin" Value="0,0,0,10"/>
        <Style.Resources>
            <Style TargetType="ColumnDefinition">
                <Style.Triggers>
                    <Trigger Property="Grid.Column" Value="0">
                        <Setter Property="Width" Value="*"/>
                    </Trigger>
                    <Trigger Property="Grid.Column" Value="1">
                        <Setter Property="Width" Value="Auto"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="SliderValueText" TargetType="TextBlock" BasedOn="{StaticResource DynamicTextStyle}">
        <Setter Property="Margin" Value="10,0,0,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="MinWidth" Value="40"/>
    </Style>

    <!-- Section Divider Style -->
    <Style x:Key="SectionDivider" TargetType="hc:Divider" BasedOn="{StaticResource DividerBaseStyle}">
        <Setter Property="Margin" Value="0,0,0,10"/>
    </Style>

    <!-- Scrollviewer Style -->
    <Style x:Key="PanelScrollViewer" TargetType="ScrollViewer" BasedOn="{StaticResource ScrollViewerNativeBaseStyle}">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Margin" Value="5,10"/>
    </Style>

    <!-- ResizeHandle Style -->
    <Style x:Key="ResizeHandle" TargetType="Grid">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Cursor" Value="SizeNWSE"/>
        <Setter Property="Margin" Value="0,0,5,5"/>
    </Style>

    <Style x:Key="ResizeHandleIcon" TargetType="Path">
        <Setter Property="Data" Value="M 0,16 L 16,0 16,16 Z"/>
        <Setter Property="Fill" Value="{DynamicResource SecondaryRegionBrush}"/>
    </Style>

    <Style x:Key="NoOverflowToolBarStyle" TargetType="ToolBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolBar">
                    <Border x:Name="MainPanelBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            Style="{StaticResource BorderRegion}">
                        <DockPanel KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="ToolBarHeader"
                                              ContentSource="Header"
                                              DockPanel.Dock="Left"/>
                            <ToolBarPanel x:Name="PART_ToolBarPanel"
                                          IsItemsHost="true"
                                          Margin="0,1,2,2"/>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentGroupBoxStyle" TargetType="GroupBox" BasedOn="{StaticResource GroupBoxTab}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border x:Name="HeaderBorder" 
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,1,1,0"
                                CornerRadius="4,4,0,0"
                                Padding="8,4">
                            <ContentPresenter ContentSource="Header" 
                                              RecognizesAccessKey="True"
                                              HorizontalAlignment="Center"/>
                        </Border>

                        <Border Grid.Row="1"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorPickerButtonPreserveColor" TargetType="Button" BasedOn="{StaticResource ColorPickerButton}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" 
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DataGrid Styles -->
    <Style x:Key="StandardDataGrid" TargetType="DataGrid">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="RowBackground" Value="Transparent"/>
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource SecondaryRegionBrush}"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="RowHeight" Value="32"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
    </Style>

    <Style x:Key="StandardDataGridColumnHeader" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
        <Setter Property="Padding" Value="10,6"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Height" Value="32"/>
    </Style>

    <Style x:Key="StandardDataGridRow" TargetType="DataGridRow">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PrimaryColor}" Opacity="0.3"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StandardDataGridCell" TargetType="DataGridCell">
        <Setter Property="Padding" Value="10,4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Text Styles for DataGrid Cells -->
    <Style x:Key="CenteredTextBlockStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="LeftAlignedTextBlockStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <!-- DataGrid Cell Text Styles -->
    <Style x:Key="StandardCellTextStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="Margin" Value="5,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=IsSelected}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CenteredCellTextStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=IsSelected}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BoldCellTextStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Margin" Value="5,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=IsSelected}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClickableCellTextStyle" TargetType="TextBlock" BasedOn="{StaticResource StandardCellTextStyle}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Setter Property="Foreground" Value="#0094FF"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#42B0FF"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=IsSelected}" Value="True">
                <Setter Property="Foreground" Value="#67C8FF"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Modern MessageBox Window Style -->
    <Style x:Key="ModernMessageBoxStyle" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="Topmost" Value="True"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Effect" Value="{StaticResource PanelShadow}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="8">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <!-- Title Bar using existing PanelHeader style -->
                            <Border Grid.Row="0" Style="{StaticResource PanelHeader}" MinHeight="40">
                                <TextBlock Text="{TemplateBinding Title}"
                                          Style="{StaticResource PanelHeaderText}"
                                          VerticalAlignment="Center"/>
                            </Border>

                            <!-- Content Area -->
                            <Border Grid.Row="1" 
                                    Padding="20"
                                    Background="{DynamicResource RegionBrush}"
                                    CornerRadius="0,0,8,8">
                                <ContentPresenter/>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Primary MessageBox Button Style -->
    <Style x:Key="MessageBoxPrimaryButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonPrimary}">
        <Setter Property="Padding" Value="16,2"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="hc:BorderElement.CornerRadius" Value="6"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <!-- Secondary MessageBox Button Style -->
    <Style x:Key="MessageBoxSecondaryButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonDefault}">
        <Setter Property="Padding" Value="16,2"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="hc:BorderElement.CornerRadius" Value="6"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!-- MessageBox Content Text Style -->
    <Style x:Key="MessageBoxContentText" TargetType="TextBlock" BasedOn="{StaticResource DynamicTextStyle}">
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="LineHeight" Value="20"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="0,10,0,20"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>
</ResourceDictionary>